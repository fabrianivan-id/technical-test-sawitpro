// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// CreateEstateRequest defines model for CreateEstateRequest.
type CreateEstateRequest struct {
	Length int `json:"length"`
	Width  int `json:"width"`
}

// CreateEstateResponse defines model for CreateEstateResponse.
type CreateEstateResponse struct {
	Id string `json:"id"`
}

// CreateTreeRequest defines model for CreateTreeRequest.
type CreateTreeRequest struct {
	Height int `json:"height"`
	X      int `json:"x"`
	Y      int `json:"y"`
}

// CreateTreeResponse defines model for CreateTreeResponse.
type CreateTreeResponse struct {
	Id string `json:"id"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// GetDronePlanResponse defines model for GetDronePlanResponse.
type GetDronePlanResponse struct {
	Distance int `json:"distance"`
}

// GetEstateStatsResponse defines model for GetEstateStatsResponse.
type GetEstateStatsResponse struct {
	Count  int `json:"count"`
	Max    int `json:"max"`
	Median int `json:"median"`
	Min    int `json:"min"`
}

// PostEstateJSONRequestBody defines body for PostEstate for application/json ContentType.
type PostEstateJSONRequestBody = CreateEstateRequest

// PostEstateIdTreeJSONRequestBody defines body for PostEstateIdTree for application/json ContentType.
type PostEstateIdTreeJSONRequestBody = CreateTreeRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create A New Estate
	// (POST /estate)
	PostEstate(ctx echo.Context) error
	// Get Drone Plan for The Estate
	// (GET /estate/{id}/drone-plan)
	GetEstateIdDronePlan(ctx echo.Context, id string) error
	// Get Estate Statistics
	// (GET /estate/{id}/stats)
	GetEstateIdStats(ctx echo.Context, id string) error
	// Create a New Tree on The Estate
	// (POST /estate/{id}/tree)
	PostEstateIdTree(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostEstate converts echo context to params.
func (w *ServerInterfaceWrapper) PostEstate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEstate(ctx)
	return err
}

// GetEstateIdDronePlan converts echo context to params.
func (w *ServerInterfaceWrapper) GetEstateIdDronePlan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEstateIdDronePlan(ctx, id)
	return err
}

// GetEstateIdStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetEstateIdStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEstateIdStats(ctx, id)
	return err
}

// PostEstateIdTree converts echo context to params.
func (w *ServerInterfaceWrapper) PostEstateIdTree(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEstateIdTree(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/estate", wrapper.PostEstate)
	router.GET(baseURL+"/estate/:id/drone-plan", wrapper.GetEstateIdDronePlan)
	router.GET(baseURL+"/estate/:id/stats", wrapper.GetEstateIdStats)
	router.POST(baseURL+"/estate/:id/tree", wrapper.PostEstateIdTree)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWXU/bMBT9K9HdHlOSllJG3sZgqA9DaLAnxIOJbxujxDb2TaGq+t8nO2khbUo7iY9t",
	"b1Zybu7xOcfXmUGqCq0kSrKQzMCmGRbML78ZZISnlhjhT7wv0ZJ7rI3SaEigB+Uox5S5FT6yQucIyVEI",
	"NNUICQhJOEYD8xAeBN8Om4dg8L4UBjkk14tvL4pvlgXq9g5Tcp9tcrRaSYvrJAVvdIZubx/7B4PDDn45",
	"uu10e3y/w/oHg06/Nxh0+93DfhzHsOxmyQg5XmMn+AuMrgxu1ixDMc6oQanbptnjdsh0G2SF9CO4mnBB",
	"YdsG/gZBT41RZjOVAq1lY//i5c8vgG09zpBOjJJ4kTO5uRUXlphMsal5L96q+rJwQ+8qv5fEyG7unqpS",
	"7hCagu0QmwK5YHIHnJB/GLCKZUWjql92W9+8KxZypPwgESnW+5ascKgfwyvHgQT5jP2yaIJLNBORIoQw",
	"QWOFki58e/Fe7JBKo2RaQAL7/lEImlHmxYvQS+xVVdWZdNoyEkoOOSRwoWxtA1QbQkvHik8r5SVhpT3T",
	"OhepL4vurJJPI9OtPhscQQKfoqeZGtUDNWqbpvOmemRK9A+qCHjivbj7RhTqnHkOHG1qhKZK0AoRpB7O",
	"nbL9OH41Fs3z3NL+mPGgVig4xpSVFgM1CoZywnLBAyF1ST53tiwKZqaQ1DMr+Bqc40NQ2+gQte3RTPB5",
	"xN0J7+i8Cv4YW1KwPItDvpwHPkaGFUhoLCTXs3a1hifgwgyJDx2EixQLDqseh8+UWp1ZN2v+v57yrVOu",
	"xQAPCvzevff99/P+qXVtY3CuKPiuSslXLD9DCp6hR8oEVxluNN8t7S6++yn8X3nedrtsPvUOJyyJ1L67",
	"+Ts43kJy1WkyuNOcH3L3j/MBTr/V3fL8n/NDbpbGP2OLv+79P3irMH+rePJKNoeMg6OZLKJTmhwSyIh0",
	"EkW5SlmeuRDOb+a/AwAA//+kIxJ0Zw0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
